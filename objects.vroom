# This is a sample Vroom input file. It should help you get started.
#
# Edit this file with your content. Then run `vroom vroom` to start
# the show!
#
# See `perldoc Vroom` for complete details.
#
---- config
# Basic config options.
title: Perl 6
indent: 4
auto_size: 1
# height: 18
# width: 69
vim_opts: '-u vimrc'
skip: 0

# The following options are for Gvim usage.
# vim: gvim
# gvimrc: |
#   set fuopt=maxhorz,maxvert
#   set guioptions=egmLtT
#   set guifont=Bitstream_Vera_Sans_Mono:h18
#   set guicursor=a:blinkon0-ver25-Cursor
#   colorscheme default

---- perl6
== # Basic class

class Phone {
	has $.OS;       # public, read-only attribute...
	has $.carrier;  #   ...automatic generation of accessor of same name

	method call { ... }
}

my $phone = Phone.new(OS => "Android", carrier => "AT&T");

say $phone.WHAT;  # (Phone)

say $phone.OS;    # Android

$phone.OS = "iOS" # Error: Can't write to a readonly attribute

---- perl6
== # Phone.pm

class Phone;

has $.OS;
has $.carrier;

method call { ... }

---- perl6
== # Read/Write trait

class Phone {
	has $.OS;
	has $.carrier is rw;
}

my $phone = Phone.new(OS => "Android", carrier => "AT&T");

say $phone.carrier;   # AT&T

$phone.carrier = "Verizon";

say $phone.carrier;   # Verizon

---- perl6
== # Private attribute

class Monger {
	has $!name;     # private attribute, no public accessor
}

my $monger = Monger.new();

$monger.can("name") ?? say "Yes I can" !! say "No I can't";

$monger.name;  # Error: no such method

---- perl6
== # Multi Method Dispatching

class Monger {
	multi method code { ... }
	multi method code (Str $lang) { ... }
	multi method code (Str $lang, $editor) { ... }
	multi method code (:$lang, :$editor) { ... } # named parameters
}

my $monger = Monger.new;

$monger.code();
$monger.code("Perl6");
$monger.code("Perl6", "vi");
$monger.code(editor => "vi", lang => "Perl6");

---- perl6
== # Private method

class Monger {
	method !code {
		say "I'm coding now.";
	}

	method do_something {
		self!code();
	}
}

my $monger = Monger.new;

$monger.can("code") ?? say "Accessible" !! say "code() is inaccessible";

$monger.do_something();

---- perl6
== # Inheritance
class Person {
	has $.name is rw;

	method reset {
		$.name = "";
	}
}

class Monger is Person {
	has $.fav_lang is rw;

	method reset {
		$.fav_lang = "perl";
		nextsame;
	}
}

my $monger = Monger.new(name => "Gabriel", fav_lang => "perl6");
say $monger.fav_lang;
$monger.reset;
say $monger.fav_lang;

---- perl6
== # C3 method resolution order

class Person { }
class Monger is Person { }

say Monger.^mro;  # (Monger) (Person) (Any) (Mu)
				  # ^ is a metaclass operator

====
http://doc.perl6.org/language/objects#Inheritance
