---- config
title: Perl 6
indent: 4
auto_size: 1
# height: 18
# width: 69
vim_opts: '-u vimrc'
skip: 0

---- perl6
== # if statement

my $one = 1;

if $one eq "1" {           # $one is coerced into a Str: Yes
	say "Yes"
}

say "Yes" if $one == "1";  # "1" is coerced into an Int: Yes

---- perl6
== # if else

my $one = 1;

if $one eq "2" {
	say "this won't execute";
} elsif $one eq 2 {
	say "this also won't execute";
} else {
	say "$one was not found";
}

---- perl6
== # Chained comparisons

if 0 <= 10 <= 15 <= 25 <= 100 {
	say "chained comparison";
}

---- perl6
== # Junctions

my Int $i = 10;

if $i == 1 or $i == 10 or $i == 20 {  # short-circuits
	say "Explicit equals: Found either 1, 5, or 10";
}

if $i == 1|5|10 {  # all values of the junction get evaluated
	say "Junction: Found either 1, 5, or 10";
}

---- perl6
== # Junctions

my @states = <Illinois Wisconsin Minnesota>;

if "Wisconsin" eq any(@states) {  # lists too
	say "Found Wisconsin";
}

---- perl6
== # Junctions

my @numbers = (1, 2, 3);
my @bigger  = (4, 5, 6);

if any(@bigger) > all(@numbers) {
	say "At least one bigger";
}

----
== Junctions

Type  Constructor  Operator  True if..

all   all          &         no value evaluates to False
any   any          |         at least one value evaluates to True
one   one          ^         exactly one value evaluates to True
none  none                   no value evaluates to True

====
http://doc.perl6.org/type/Junction
