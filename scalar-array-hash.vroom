---- config
title: Perl 6
indent: 4
auto_size: 1
# height: 18
# width: 69
vim_opts: '-u vimrc'
skip: 0

---- perl6
== # Scalars

my $var = 1;
say $var.WHAT;   # (Int)

$var = "some arbitrary string";  # "dynamically" typed
say $var.WHAT;   # (Str)

say $var.perl;   # "some arbitrary string"

====
What does it mean to be dynamically types? I think Perl 6 takes the type
system to a different level, not only bridging a gap between
functional/OO languages, but those that can leverage types in ways that
don't have to be built into the language.

---- perl6
== # Arrays/Lists

# The , is the Perl 6 list operator--except for the empty list: ()

my @list = 1, 2, 3;

say @list.WHAT;
say @list.perl;

@list = ();      # empty list
say @list.perl;

---- perl6
== # Ranges / Auto-quote

# Ranges are created with the .. operator

my @list1 = 1..100;

# Infinite lists - lists are lazy by default

my @list2 = 1..*;  # "whatever star"

# Autoquote list, Perl's qw// shortcut

my @list3 = <one two three>;

====
http://doc.perl6.org/type/Whatever

---- perl6
== # Hashes

# => 'fat comma' auto-quotes barewords used as its left operand

my %hash =
	1 => "one",
	2 => "two",
	3 => "three";

say %hash.WHAT;
say %hash.perl;

====
"Fat Comma to Adverbial Pairs": https://www.youtube.com/watch?v=egz3HeNEDnM

---- perl6
== # Hashes

my %hash =
	1 => "one",
	2 => "two",
	3 => "three";

say %hash{'2'};  # no bare words allowed, error otherwise
say %hash<2>;    # use autoquote operator for bareword

---- perl6
== # Interpolation

my $name = "Gabriel";
say "Hello, $name";

my @list = <one two three four>;  # qw/one two three four/
say "@list";                      # literal, no interpolation
say "@list[]";                    # zen slice
say "{@list}";                    # interpolates

my %hash = ( 1 => 'one', 2 => 'two', );
say "%hash";                      # literal, no interpolation
say "%hash{}";                    # interpolates
say "{%hash}";                    # also interpolates

---- perl6
== # Interpolating Code

sub foo {
	65536;
}

say "Run a subroutine and coerce into a string: '{foo()}'";

====
See S04: http://www.perlcabal.org/syn/S04.html
